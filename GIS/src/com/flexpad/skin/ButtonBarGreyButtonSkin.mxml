<?xml version="1.0" encoding="utf-8"?>

<!--

ADOBE SYSTEMS INCORPORATED
Copyright 2008 Adobe Systems Incorporated
All Rights Reserved.

NOTICE: Adobe permits you to use, modify, and distribute this file
in accordance with the terms of the license agreement accompanying it.

-->

<!--- The default skin class for a Spark ToggleButton component.

@see spark.components.ToggleButton

@langversion 3.0
@playerversion Flash 10
@playerversion AIR 1.5
@productversion Flex 4
-->
<s:SparkSkin 
    minHeight="21"
    minWidth="21"
    xmlns:fx="http://ns.adobe.com/mxml/2009"
    xmlns:s="library://ns.adobe.com/flex/spark"
    xmlns:fb="http://ns.adobe.com/flashbuilder/2009"
    alpha.disabledStates="0.5"
    xmlns:flexpad="com.flexpad.*">
    <fx:Metadata>[HostComponent("com.flexpad.ButtonBarGreyButton")]</fx:Metadata>

    <!-- host component -->
    <fx:Script fb:purpose="styling">
        /* Define the skin elements that should not be colorized.
        For toggle button, the graphics are colorized but the label is not. */
        static private const exclusions:Array = [ "labelDisplay" ];

        /**
         * @private
         */
        override public function get colorizeExclusions():Array
        {
            return exclusions;
        }

        /**
         * @private
         */
        override protected function initializationComplete():void
        {
            useChromeColor = true;
            super.initializationComplete();
        }

        /**
         * @private
         */
        override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void
        {
            super.updateDisplayList(unscaledWidth, unscaledHeight);
        }
    </fx:Script>

    <!-- states -->
    <s:states>
        <s:State name="up"/>
        <s:State name="over"
            stateGroups="overStates"/>
        <s:State name="down"
            stateGroups="downStates"/>
        <s:State name="disabled"
            stateGroups="disabledStates"/>
        <s:State name="upAndSelected"
            stateGroups="selectedStates, selectedUpStates"/>
        <s:State name="overAndSelected"
            stateGroups="overStates, selectedStates"/>
        <s:State name="downAndSelected"
            stateGroups="downStates, selectedStates"/>
        <s:State name="disabledAndSelected"
            stateGroups="selectedUpStates, disabledStates, selectedStates"/>
    </s:states>

    <!-- layer 2: fill -->
    <!--- @private -->
    <s:Rect id="fill"
        left="1" right="1" top="1" bottom="1"
        topLeftRadiusX="{hostComponent.type=='first'?4:0}"
        topLeftRadiusY="{hostComponent.type=='first'?4:0}"
        bottomLeftRadiusX="{hostComponent.type=='first'?4:0}"
        bottomLeftRadiusY="{hostComponent.type=='first'?4:0}"
        topRightRadiusX="{hostComponent.type=='last'?4:0}"
        topRightRadiusY="{hostComponent.type=='last'?4:0}"
        bottomRightRadiusX="{hostComponent.type=='last'?4:0}"
        bottomRightRadiusY="{hostComponent.type=='last'?4:0}">
        <s:fill>
            <s:LinearGradient rotation="-90">
                <s:GradientEntry 
                    color="0xbdc0c9"
                    color.selectedStates="0x666d74"/>
                <s:GradientEntry 
                    color="0xf4f4f5"
                    color.selectedStates="0xafb2b6"/>
            </s:LinearGradient>
        </s:fill>
        <s:filters>
            <s:DropShadowFilter 
                color="0xFFFFFF"
                angle="90"
                alpha="1"
                distance="1"
                blurX="2"
                blurY="2"/>
            <s:DropShadowFilter 
                color="0"
                angle="90"
                alpha="0.14"
                distance="1"
                blurX="0"
                blurY="0"
                inner="true"/>
        </s:filters>
    </s:Rect>

    <!-- layer 7: border - put on top of the fill so it doesn't disappear when scale is less than 1 -->
    <!--- @private -->
    <s:Rect id="border"
        width="69" height="20"
        left="0" right="0" top="0" bottom="0"
        topLeftRadiusX="{hostComponent.type=='first'?4:0}"
        topLeftRadiusY="{hostComponent.type=='first'?4:0}"
        bottomLeftRadiusX="{hostComponent.type=='first'?4:0}"
        bottomLeftRadiusY="{hostComponent.type=='first'?4:0}"
        topRightRadiusX="{hostComponent.type=='last'?4:0}"
        topRightRadiusY="{hostComponent.type=='last'?4:0}"
        bottomRightRadiusX="{hostComponent.type=='last'?4:0}"
        bottomRightRadiusY="{hostComponent.type=='last'?4:0}">
        <s:stroke>
            <s:LinearGradientStroke rotation="90"
                weight="1">
                <s:GradientEntry 
                    color="0x6a6b6b"
                    color.selectedStates="0x4b4d4e"
                    ratio="0"/>
                <s:GradientEntry 
                    color="0x92959d"
                    color.selectedStates="0x52575c"
                    ratio="1"/>
            </s:LinearGradientStroke>
        </s:stroke>
    </s:Rect>

    <!-- layer 8: text -->
    <!--- @copy spark.components.supportClasses.ButtonBase#labelDisplay -->
    <flexpad:ButtonBarGreyButtonLabel id="labelDisplay"
        left="30" right="30" top="9" bottom="9"
        horizontalCenter="0"
        textAlign="center"
        verticalAlign="middle"
        verticalCenter="1"
        currentState="normal"
        currentState.selectedStates="selected"
        maxDisplayedLines="1">
    </flexpad:ButtonBarGreyButtonLabel>

</s:SparkSkin>
